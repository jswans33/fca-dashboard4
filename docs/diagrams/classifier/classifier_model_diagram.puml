@startuml "Equipment Classifier Model"

' Define the styles
skinparam packageStyle rectangle
skinparam componentStyle uml2
skinparam backgroundColor white
skinparam arrowColor black
skinparam classBackgroundColor lightblue
skinparam classBorderColor black
skinparam noteBackgroundColor lightyellow
skinparam noteBorderColor black

' Title
title Equipment Classifier Model - Entity Relationship Diagram

' Input Data
package "Input Data" {
  class "Equipment Data (CSV)" as InputData {
    + Asset Category
    + Equip Name ID
    + System Type ID
    + Sub System Type
    + Sub System ID
    + Title
    + Precon System
    + Operations System
    + Sub System Class
    + Drawing Abbreviation
    + Equipment Size
    + Unit
    + Service Life
  }
}

' Data Preprocessing
package "Data Preprocessing" {
  class "DataPreprocessor" as DataPreprocessor {
    + load_and_preprocess_data(data_path)
    --
    - Clean column names
    - Fill NaN values
    - Handle encoding issues
  }
}

' Feature Engineering
package "Feature Engineering" {
  class "FeatureEngineer" as FeatureEngineer {
    + enhance_features(df)
    + create_hierarchical_categories(df)
    --
    - Extract primary classification columns
    - Create combined text features
    - Add service life as numeric feature
    - Create hierarchical categories
  }
  
  class "EnhancedFeatures" as EnhancedFeatures {
    + Equipment_Category
    + Uniformat_Class
    + System_Type
    + Equipment_Type
    + System_Subtype
    + combined_features
    + service_life
  }
}

' Model Building
package "Model Building" {
  class "ModelBuilder" as ModelBuilder {
    + build_enhanced_model()
    + optimize_hyperparameters(pipeline, X_train, y_train)
    --
    - Create text feature pipeline
    - Create numeric feature pipeline
    - Combine with ColumnTransformer
    - Build RandomForest classifier
  }
  
  class "ModelPipeline" as ModelPipeline {
    + preprocessor: ColumnTransformer
    + clf: MultiOutputClassifier
    --
    - text_features: TfidfVectorizer
    - numeric_features: StandardScaler
    - classifier: RandomForestClassifier
  }
}

' Training
package "Training" {
  class "ModelTrainer" as ModelTrainer {
    + train_enhanced_model(data_path)
    + handle_class_imbalance(X, y)
    --
    - Split data into train/test
    - Handle class imbalance
    - Train model
    - Evaluate model
  }
  
  class "TrainingData" as TrainingData {
    + X_train: DataFrame
    + y_train: DataFrame
    + X_test: DataFrame
    + y_test: DataFrame
  }
}

' Evaluation
package "Evaluation" {
  class "ModelEvaluator" as ModelEvaluator {
    + enhanced_evaluation(model, X_test, y_test)
    + analyze_other_category_features(model, X_test, y_test, y_pred_df)
    + analyze_other_misclassifications(X_test, y_test, y_pred_df)
    --
    - Generate classification reports
    - Calculate accuracy metrics
    - Analyze feature importance
    - Analyze misclassifications
  }
  
  class "EvaluationResults" as EvaluationResults {
    + classification_reports
    + accuracy_scores
    + feature_importance
    + misclassification_analysis
  }
}

' Prediction
package "Prediction" {
  class "Predictor" as Predictor {
    + predict_with_enhanced_model(model, description, service_life)
    --
    - Create input DataFrame
    - Make prediction
    - Map to MasterFormat
  }
  
  class "PredictionInput" as PredictionInput {
    + description: String
    + service_life: Float
  }
  
  class "PredictionOutput" as PredictionOutput {
    + Equipment_Category: String
    + Uniformat_Class: String
    + System_Type: String
    + Equipment_Type: String
    + System_Subtype: String
    + MasterFormat_Class: String
  }
}

' MasterFormat Mapping
package "MasterFormat Mapping" {
  class "MasterFormatMapper" as MasterFormatMapper {
    + enhanced_masterformat_mapping(uniformat_class, system_type, equipment_category, equipment_subcategory)
    --
    - Primary mapping
    - Equipment-specific mapping
    - Fallback mapping
  }
  
  class "MappingTables" as MappingTables {
    + primary_mapping: Dict
    + equipment_specific_mapping: Dict
    + fallbacks: Dict
  }
}

' Configuration
package "Configuration" {
  class "Settings" as Settings {
    + classifier.data_paths.training_data
    + classifier.model.random_forest
    + classifier.tfidf
    + classifier.output
    + classifier.examples
  }
}

' Define relationships
InputData --> DataPreprocessor
DataPreprocessor --> FeatureEngineer
FeatureEngineer --> EnhancedFeatures
EnhancedFeatures --> ModelTrainer
ModelBuilder --> ModelPipeline
ModelPipeline --> ModelTrainer
ModelTrainer --> TrainingData
TrainingData --> ModelEvaluator
ModelEvaluator --> EvaluationResults
ModelPipeline --> Predictor
PredictionInput --> Predictor
Predictor --> PredictionOutput
Predictor --> MasterFormatMapper
MasterFormatMapper --> MappingTables
Settings --> ModelBuilder
Settings --> DataPreprocessor
Settings --> ModelTrainer

' Add notes
note bottom of InputData
  CSV file with equipment data
  Default path: fca_dashboard/classifier/ingest/eq_ids.csv
end note

note right of EnhancedFeatures
  Hierarchical structure:
  Equipment_Category -> Equipment_Type
  System_Type -> System_Subtype
end note

note right of ModelPipeline
  Pipeline components:
  1. ColumnTransformer for feature processing
  2. MultiOutputClassifier for multi-target classification
  3. RandomForestClassifier as base estimator
end note

note bottom of TrainingData
  Class imbalance handled with RandomOverSampler
  Test size: 30% of data
end note

note right of PredictionOutput
  Hierarchical classification results
  with MasterFormat mapping
end note

@enduml