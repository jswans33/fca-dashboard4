@startuml "Equipment Classifier Data Model"

' Define the styles
skinparam packageStyle rectangle
skinparam componentStyle uml2
skinparam backgroundColor white
skinparam arrowColor black
skinparam classBackgroundColor lightblue
skinparam classBorderColor black
skinparam noteBackgroundColor lightyellow
skinparam noteBorderColor black

' Title
title Equipment Classifier - Data Model Entity Relationship Diagram

' Input Data Entity
entity "Equipment" as Equipment {
  * equipment_id : int <<PK>>
  --
  * asset_category : string
  * equip_name_id : string
  * system_type_id : string
  * sub_system_type : string
  * sub_system_id : string
  * title : string
  * precon_system : string
  * operations_system : string
  * sub_system_class : string
  * drawing_abbreviation : string
  * equipment_size : float
  * unit : string
  * service_life : float
}

' Classification Entities
entity "EquipmentCategory" as EquipmentCategory {
  * category_id : int <<PK>>
  --
  * name : string
  * description : string
}

entity "UniformatClass" as UniformatClass {
  * uniformat_id : int <<PK>>
  --
  * code : string
  * name : string
  * description : string
}

entity "SystemType" as SystemType {
  * system_type_id : int <<PK>>
  --
  * name : string
  * description : string
}

entity "EquipmentType" as EquipmentType {
  * equipment_type_id : int <<PK>>
  * category_id : int <<FK>>
  --
  * name : string
  * description : string
}

entity "SystemSubtype" as SystemSubtype {
  * system_subtype_id : int <<PK>>
  * system_type_id : int <<FK>>
  --
  * name : string
  * description : string
}

entity "MasterFormatClass" as MasterFormatClass {
  * masterformat_id : int <<PK>>
  --
  * code : string
  * name : string
  * description : string
}

' Mapping Entities
entity "EquipmentClassification" as EquipmentClassification {
  * classification_id : int <<PK>>
  * equipment_id : int <<FK>>
  * category_id : int <<FK>>
  * uniformat_id : int <<FK>>
  * system_type_id : int <<FK>>
  * equipment_type_id : int <<FK>>
  * system_subtype_id : int <<FK>>
  * masterformat_id : int <<FK>>
  --
  * confidence_score : float
  * classification_date : datetime
}

entity "MasterFormatMapping" as MasterFormatMapping {
  * mapping_id : int <<PK>>
  * uniformat_id : int <<FK>>
  * system_type_id : int <<FK>>
  * equipment_type_id : int <<FK>>
  * masterformat_id : int <<FK>>
  --
  * is_primary_mapping : boolean
  * is_equipment_specific : boolean
  * is_fallback : boolean
}

' Model Entities
entity "ClassifierModel" as ClassifierModel {
  * model_id : int <<PK>>
  --
  * model_type : string
  * creation_date : datetime
  * version : string
  * hyperparameters : json
  * performance_metrics : json
  * feature_importance : json
}

entity "TrainingSession" as TrainingSession {
  * session_id : int <<PK>>
  * model_id : int <<FK>>
  --
  * training_date : datetime
  * training_duration : float
  * sample_count : int
  * class_distribution : json
  * validation_metrics : json
}

entity "Prediction" as Prediction {
  * prediction_id : int <<PK>>
  * model_id : int <<FK>>
  * classification_id : int <<FK>>
  --
  * input_description : string
  * input_service_life : float
  * prediction_date : datetime
  * confidence_scores : json
}

' Define relationships
Equipment ||--o{ EquipmentClassification
EquipmentCategory ||--o{ EquipmentClassification
EquipmentCategory ||--o{ EquipmentType
UniformatClass ||--o{ EquipmentClassification
SystemType ||--o{ EquipmentClassification
SystemType ||--o{ SystemSubtype
EquipmentType ||--o{ EquipmentClassification
SystemSubtype ||--o{ EquipmentClassification
MasterFormatClass ||--o{ EquipmentClassification
MasterFormatClass ||--o{ MasterFormatMapping

UniformatClass ||--o{ MasterFormatMapping
SystemType ||--o{ MasterFormatMapping
EquipmentType ||--o{ MasterFormatMapping

ClassifierModel ||--o{ TrainingSession
ClassifierModel ||--o{ Prediction
EquipmentClassification ||--o{ Prediction

' Add notes
note bottom of Equipment
  Raw equipment data from CSV file
  Used for training and classification
end note

note right of EquipmentClassification
  Links equipment to its classifications
  Stores confidence scores for each classification
end note

note bottom of MasterFormatMapping
  Mapping rules for converting between
  classification systems
end note

note right of ClassifierModel
  Represents the trained model
  Stores hyperparameters and performance metrics
end note

note bottom of Prediction
  Records of predictions made by the model
  Links to the resulting classification
end note

note top of EquipmentCategory
  Primary classification level
end note

note top of EquipmentType
  Secondary classification level
  More specific than EquipmentCategory
end note

note top of SystemType
  Primary system classification
end note

note top of SystemSubtype
  Secondary system classification
  More specific than SystemType
end note

@enduml