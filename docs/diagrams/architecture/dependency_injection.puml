@startuml "NexusML Dependency Injection"

' Define styles
skinparam backgroundColor white
skinparam classAttributeIconSize 0
skinparam defaultFontName Arial
skinparam defaultFontSize 12
skinparam roundCorner 8
skinparam classBorderColor #666666

' Define DI container
class DIContainer {
  -_factories: Dict[Type, Callable]
  -_singletons: Dict[Type, bool]
  -_instances: Dict[Type, Any]
  +register(interface_type, implementation_type=None, singleton=False)
  +register_factory(interface_type, factory, singleton=False)
  +register_instance(interface_type, instance)
  +resolve(interface_type)
  +clear()
}

' Define component registry
class ComponentRegistry {
  -_implementations: Dict
  -_default_implementations: Dict
  +register(interface_type, name, implementation_type)
  +get_implementation(interface_type, name=None)
  +set_default_implementation(interface_type, name)
  +get_default_implementation(interface_type)
}

' Define factory
class PipelineFactory {
  -_registry: ComponentRegistry
  -_container: DIContainer
  +create_data_loader(**kwargs)
  +create_data_preprocessor(**kwargs)
  +create_feature_engineer(**kwargs)
  +create_model_builder(**kwargs)
  +create_model_trainer(**kwargs)
  +create_model_evaluator(**kwargs)
  +create_model_serializer(**kwargs)
  +create_predictor(**kwargs)
  +create(component_type, **kwargs)
}

' Define component with dependencies
class ComponentWithDependencies {
  -_data_loader: DataLoader
  -_preprocessor: DataPreprocessor
  +__init__(data_loader, preprocessor)
  +process_data(data_path)
}

' Define interfaces
interface DataLoader {
  +load_data(data_path: str)
  +get_config()
}

interface DataPreprocessor {
  +preprocess(data)
  +verify_required_columns(data)
}

' Define implementations
class CSVDataLoader {
  -_file_path: str
  +__init__(file_path=None)
  +load_data(data_path=None)
  +get_config()
}

class StandardPreprocessor {
  +preprocess(data)
  +verify_required_columns(data)
}

' Define relationships
DIContainer <-- PipelineFactory
ComponentRegistry <-- PipelineFactory

DataLoader <|.. CSVDataLoader
DataPreprocessor <|.. StandardPreprocessor

DIContainer --> CSVDataLoader : creates
DIContainer --> StandardPreprocessor : creates
DIContainer --> ComponentWithDependencies : creates

ComponentWithDependencies --> DataLoader : depends on
ComponentWithDependencies --> DataPreprocessor : depends on

' Define registration and resolution sequence
note right of DIContainer
  Registration:
  1. container.register(DataLoader, CSVDataLoader)
  2. container.register(DataPreprocessor, StandardPreprocessor)
  3. container.register(ComponentWithDependencies)
end note

note right of DIContainer
  Resolution:
  1. component = container.resolve(ComponentWithDependencies)
  2. container automatically resolves dependencies:
     - data_loader = container.resolve(DataLoader)
     - preprocessor = container.resolve(DataPreprocessor)
  3. component is created with resolved dependencies
end note

@enduml