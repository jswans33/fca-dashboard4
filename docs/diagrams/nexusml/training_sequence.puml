@startuml "NexusML Training Sequence"

' Style definitions
skinparam backgroundColor white
skinparam SequenceArrowColor #666666
skinparam SequenceLifeLineBorderColor #999999
skinparam ParticipantBorderColor #999999
skinparam ParticipantBackgroundColor #EEEEEE

' Title
title NexusML Model Training Sequence

' Participants
actor "User" as User
participant "train_model_pipeline.py" as TrainPipeline
participant "load_and_preprocess_data()" as DataLoader
participant "map_staging_to_model_input()" as DataMapper
participant "GenericFeatureEngineer" as FeatureEngineer
participant "build_enhanced_model()" as ModelBuilder
participant "RandomForestClassifier" as RandomForest
participant "enhanced_evaluation()" as Evaluator

' Sequence
User -> TrainPipeline: Execute with data_path
activate TrainPipeline

TrainPipeline -> DataLoader: load_and_preprocess_data(data_path)
activate DataLoader
DataLoader --> TrainPipeline: raw_df
deactivate DataLoader

TrainPipeline -> DataMapper: map_staging_to_model_input(raw_df)
activate DataMapper
DataMapper --> TrainPipeline: mapped_df
deactivate DataMapper

TrainPipeline -> FeatureEngineer: transform(mapped_df)
activate FeatureEngineer
FeatureEngineer --> TrainPipeline: processed_df
deactivate FeatureEngineer

TrainPipeline -> TrainPipeline: Split data into X and y
TrainPipeline -> TrainPipeline: train_test_split(X, y)

TrainPipeline -> ModelBuilder: build_enhanced_model()
activate ModelBuilder
ModelBuilder --> TrainPipeline: model_pipeline
deactivate ModelBuilder

TrainPipeline -> RandomForest: fit(X_train, y_train)
activate RandomForest
RandomForest --> TrainPipeline: trained_model
deactivate RandomForest

TrainPipeline -> Evaluator: enhanced_evaluation(model, X_test, y_test)
activate Evaluator
Evaluator --> TrainPipeline: evaluation_results
deactivate Evaluator

TrainPipeline -> TrainPipeline: Save model and metadata

TrainPipeline --> User: Trained model and evaluation results
deactivate TrainPipeline

@enduml