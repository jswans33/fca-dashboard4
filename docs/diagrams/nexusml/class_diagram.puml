@startuml "NexusML Class Diagram"

' Style definitions
skinparam classAttributeIconSize 0
skinparam backgroundColor white
skinparam ArrowColor #666666
skinparam ClassBorderColor #999999
skinparam ClassBackgroundColor #EEEEEE

' Title
title NexusML Class Diagram

' Classes
class EquipmentClassifier {
  -model
  -feature_engineer
  -eav_manager
  -sampling_strategy
  +__init__(model, feature_engineer, eav_manager, sampling_strategy)
  +train(data_path, feature_config_path, **kwargs)
  +load_model(model_path)
  +predict(description, service_life, asset_tag)
  +predict_from_row(row)
  +predict_attributes(equipment_type, description)
  +fill_missing_attributes(equipment_type, attributes, description)
  +validate_attributes(equipment_type, attributes)
}

class DataMapper {
  -column_mapping
  -required_fields
  -numeric_fields
  +__init__(column_mapping)
  +map_staging_to_model_input(staging_df)
  +map_predictions_to_master_db(predictions)
  -_map_to_category_id(equipment_category)
}

class DynamicFieldMapper {
  -config_path
  -field_mappings
  -classification_targets
  +__init__(config_path)
  +load_config()
  +get_best_match(available_columns, target_field)
  +map_dataframe(df)
  +get_classification_targets()
  +get_required_db_fields()
}

class EAVManager {
  -templates_path
  -templates
  +__init__(templates_path)
  +load_templates()
  +get_equipment_template(equipment_type)
  +get_required_attributes(equipment_type)
  +get_optional_attributes(equipment_type)
  +get_all_attributes(equipment_type)
  +get_attribute_unit(equipment_type, attribute)
  +get_classification_ids(equipment_type)
  +get_performance_fields(equipment_type)
  +validate_attributes(equipment_type, attributes)
  +generate_attribute_template(equipment_type)
  +fill_missing_attributes(equipment_type, attributes, description, model)
}

class EAVTransformer {
  -eav_manager
  +__init__(eav_manager)
  +fit(X, y)
  +transform(X)
}

class GenericFeatureEngineer {
  -config_path
  -transformers
  -config
  -eav_manager
  +__init__(config_path, eav_manager)
  -_load_config()
  +fit(X, y)
  +transform(X)
}

class TextCombiner {
  -columns
  -separator
  -new_column
  +__init__(columns, separator, new_column)
  +fit(X, y)
  +transform(X)
}

class NumericCleaner {
  -column
  -new_name
  -fill_value
  -dtype
  +__init__(column, new_name, fill_value, dtype)
  +fit(X, y)
  +transform(X)
}

class HierarchyBuilder {
  -new_column
  -parent_columns
  -separator
  +__init__(new_column, parent_columns, separator)
  +fit(X, y)
  +transform(X)
}

class ColumnMapper {
  -mappings
  +__init__(mappings)
  +fit(X, y)
  +transform(X)
}

class KeywordClassificationMapper {
  -name
  -source_column
  -target_column
  -reference_manager
  -max_results
  -confidence_threshold
  -ref_manager
  +__init__(name, source_column, target_column, reference_manager, max_results, confidence_threshold)
  +fit(X, y)
  +transform(X)
}

class ClassificationSystemMapper {
  -name
  -source_column
  -target_column
  -mapping_type
  -mapping_function
  -eav_manager
  +__init__(name, source_column, target_column, mapping_type, mapping_function, eav_manager)
  +fit(X, y)
  +transform(X)
}

class ReferenceManager {
  +__init__()
  +load_all()
  +validate_data()
  +find_uniformat_codes_by_keyword(text, max_results)
}

' Functions
class "train_enhanced_model()" as train_enhanced_model << function >>
class "predict_with_enhanced_model()" as predict_with_enhanced_model << function >>
class "build_enhanced_model()" as build_enhanced_model << function >>
class "optimize_hyperparameters()" as optimize_hyperparameters << function >>
class "enhanced_evaluation()" as enhanced_evaluation << function >>
class "analyze_other_category_features()" as analyze_other_category_features << function >>
class "analyze_other_misclassifications()" as analyze_other_misclassifications << function >>
class "load_and_preprocess_data()" as load_and_preprocess_data << function >>

' Relationships
EquipmentClassifier --> EAVManager : uses
EquipmentClassifier --> GenericFeatureEngineer : uses
EquipmentClassifier ..> train_enhanced_model : calls
EquipmentClassifier ..> predict_with_enhanced_model : calls

GenericFeatureEngineer --> TextCombiner : creates
GenericFeatureEngineer --> NumericCleaner : creates
GenericFeatureEngineer --> HierarchyBuilder : creates
GenericFeatureEngineer --> ColumnMapper : creates
GenericFeatureEngineer --> KeywordClassificationMapper : creates
GenericFeatureEngineer --> ClassificationSystemMapper : creates
GenericFeatureEngineer --> EAVTransformer : creates

EAVTransformer --> EAVManager : uses

KeywordClassificationMapper --> ReferenceManager : uses
ClassificationSystemMapper --> EAVManager : uses

train_enhanced_model ..> load_and_preprocess_data : calls
train_enhanced_model ..> build_enhanced_model : calls
train_enhanced_model ..> enhanced_evaluation : calls
train_enhanced_model ..> analyze_other_category_features : calls
train_enhanced_model ..> analyze_other_misclassifications : calls

predict_with_enhanced_model ..> EAVManager : uses

build_enhanced_model ..> GenericFeatureEngineer : creates

optimize_hyperparameters ..> build_enhanced_model : uses

@enduml